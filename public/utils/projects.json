{
  "heading": [
    {
      "title": "Building a To-Do list with Dum Dum"
    }
  ],
  "chapters": [
    {
      "title": "Pre-Requisites",
      "content": [
        {
          "type": "text",
          "content": "- Any Code Editor (VSCode, Sublime Text, etc)"
        }
      ]
    },
    {
      "title": "Checkpoint 1: Dum-Dum's Big Idea",
      "content": [
        {
          "type": "text",
          "content": "Once upon a time, in the vast digital world, lived an elephant named Dum-Dum. Dum-Dum wasnâ€™t an ordinary elephant; he loved technology and was always looking for ways to organize his life better. One day, he stumbled upon \"ao,\" a powerful decentralized computer built on Arweave. Intrigued by its potential, Dum-Dum decided to create a to-do list to manage his tasks and help others do the same. He was eager to share his creation with the world and show how you, too, can build it.\n\nHe started by setting up his project. Would Dum-Dum be able to bring his idea to life? Only time would tell."
        },
        {
          "type": "code",
          "content": ""
        }
      ]
    },
    {
      "title": "Checkpoint 2: Setting Up the Foundation",
      "content": [
        {
          "type": "text",
          "content": "To get started, Dum-Dum needed to set up his project. Being the smart developer he is, instead of creating a new file locally, he went to [Better Idea IDE](https://ide.betteridea.dev/) to directly start building his to-do list application in an online IDE environment. This would allow him to quickly prototype and iterate without worrying about local setup and dependencies.\n\nIn there, he would set up the basic structure for his tasks using Lua. He required the JSON module and initialized the tables for tasks:"
        },
        {
          "type": "code",
          "content": "local json = require('json')\n\nTASKS_TABLE = TASKS_TABLE or {}\nPENDING_TASKS_TABLE = PENDING_TASKS_TABLE or {}\n\nTASK_KEYS = TASK_KEYS or {}"
        }
      ]
    },
    {
      "title": "Checkpoint 3: Creating the Tasks",
      "content": [
        {
          "type": "text",
          "content": "Next, Dum-Dum needed a way to create tasks. He added a handler for creating tasks:"
        },
        {
          "type": "code",
          "content": "Handlers.add(\n    \"CreateTask\",\n    Handlers.utils.hasMatchingTag(\"Action\", \"Create-Task\"),\n    function(msg)\n        -- Check if the message, task, or sender is invalid\n        if not msg or not msg.Task or not msg.From then\n            print(\"Error: Invalid message, task, or process.\")\n            return false\n        end\n\n        -- Initialize TASKS_TABLE if not already present\n        if not TASKS_TABLE[msg.From] then\n            TASKS_TABLE[msg.From] = {}\n        end\n\n        -- Initialize TASK_KEYS if not already present\n        if not TASK_KEYS[msg.From] then\n            TASK_KEYS[msg.From] = 0\n        end\n\n        -- Get the current task key\n        local currentTaskKey = TASK_KEYS[msg.From]\n\n        -- Assign the task to the TASKS_TABLE at the current key\n        TASKS_TABLE[msg.From][currentTaskKey] = msg.Task\n\n        -- Increment the task key for the next task\n        TASK_KEYS[msg.From] = currentTaskKey + 1\n\n        -- Print the updated task list\n        print(\"Your Task List\" .. TASKS_TABLE[msg.From])\n    end\n)"
        }
      ]
    },
    {
      "title": "Checkpoint 4: Reading Tasks",
      "content": [
        {
          "type": "text",
          "content": "After setting up the ability to create tasks, Dum-Dum recognized the need to read them. A handler was added for this purpose:"
        },
        {
          "type": "code",
          "content": "Handlers.add(\n    \"ReadTask\",\n    Handlers.utils.hasMatchingTag(\"Action\", \"Read-Task\"),\n    function(msg)\n        -- Print the task list for the user\n        print(\"Your Task List\" .. TASKS_TABLE[msg.From])\n    end\n)"
        }
      ]
    },
    {
      "title": "Checkpoint 5: Updating Tasks",
      "content": [
        {
          "type": "text",
          "content": "Dum-Dum realized he needed to update tasks. He added a handler to update tasks:"
        },
        {
          "type": "code",
          "content": "Handlers.add(\n    \"UpdateTask\",  -- Handler name\n    Handlers.utils.hasMatchingTag(\"Action\", \"Update-Task\"),  -- Match action tag\n    function(msg)  -- Handler function\n        -- Check if the message, sender, key, or task is invalid\n        if not msg or not msg.From or not msg.Key or not msg.Task then\n            print(\"Error: Invalid message, key, user, or task.\")\n            return false\n        end\n\n        -- Convert key to integer\n        local key = msg.Key\n        local int_key = tonumber(key)\n\n        -- Print the task before updating\n        print(TASKS_TABLE[msg.From][int_key])\n\n        -- Update the task with the specified key\n        TASKS_TABLE[msg.From][key] = msg.Task\n\n        -- Print the updated task list\n        print(\"Your Task List\" .. TASKS_TABLE[msg.From])\n    end\n)"
        }
      ]
    },
    {
      "title": "Checkpoint 6: Deleting Tasks",
      "content": [
        {
          "type": "text",
          "content": "Finally, Dum-Dum needed to delete tasks. He added a handler to delete tasks, ensuring tasks existed before deleting them:"
        },
        {
          "type": "code",
          "content": "Handlers.add(\n    \"DeleteTask\",  -- Handler name\n    Handlers.utils.hasMatchingTag(\"Action\", \"Delete-Task\"),  -- Match action tag\n    function(msg)  -- Handler function\n        -- Check if the message, sender, or key is invalid\n        if not msg or not msg.From or not msg.Key then\n            print(\"Error: Invalid message, key, or user.\")\n            return false\n        end\n\n        -- Convert key to integer\n        local key = msg.Key\n        local int_key = tonumber(key)\n\n        -- Check if the user's task list or the task with the specified key exists\n        if not TASKS_TABLE[msg.From] or TASKS_TABLE[msg.From][int_key] == nil then\n            print(\"Error: Task with key\", key, \"for user\", msg.From, \"does not exist.\")\n            return false\n        end\n\n        -- Print the task to be deleted\n        print(TASKS_TABLE[msg.From][int_key])\n\n        -- Delete the task from the user's task list\n        TASKS_TABLE[msg.From][int_key] = nil\n\n        -- Print the updated task list\n        print(TASKS_TABLE[msg.From][int_key])\n        print(\"Your Task List\" .. TASKS_TABLE[msg.From])\n    end\n)"
        }
      ]
    },
    {
      "title": "Checkpoint 7: Running the Process",
      "content": [
        {
          "type": "text",
          "content": "To bring his to-do list to life, Dum-Dum follows these steps:\n\n1. Load the todo.lua file to initialize the to-do list script.\n\n ```bash\n.load todo.lua\n``` \n\nThis command loads the Lua script for Dum-Dum's to-do list into the system.\n\n2. Create a task titled \"Build on AO\" to kickstart his project.\n\n```bash\nSend({ Target = ao.id, Action = \"Create-Task\", Task = \"Build on AO\" })\n```\n\nDum-Dum initiates his project by creating a task titled \"Build on AO\" using the 'Create-Task' action.\n\n3. Read the task list to review existing tasks and ensure accuracy.\n\n```bash\nSend({ Target = ao.id, Action = \"Read-Task\" })\n```\n\nDum-Dum checks the task list to see the tasks he has created so far.\n\n4. Create another task with a specified key for further organization.\n\n```bash\nSend({ Target = ao.id, Action = \"Update-Task\", Key = \"0\" })\n```\n\nDum-Dum creates a new task with a specific key, providing further organization to his to-do list.\n\n5. Delete the task with the specified key to manage his list effectively.\n\n```bash\nSend({ Target = ao.id, Action = \"Delete-Task\", Key = \"0\" })\n```\n\nDum-Dum removes the task with the specified key, ensuring his to-do list remains updated and organized.\n\nBy following these steps, Dum-Dum demonstrates the functionality of his to-do list, showcasing how tasks can be created, managed, and organized efficiently."
        }
      ]
    }
  ]
}
